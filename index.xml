<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on My New Hugo Site</title>
    <link>http://example.org/</link>
    <description>Recent content in Home on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 May 2021 15:54:59 +0200</lastBuildDate><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Commands</title>
      <link>http://example.org/web/static-site-generators/hugo/commands/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/web/static-site-generators/hugo/commands/</guid>
      <description>Create site :   Create site &amp;ldquo;documentation&amp;rdquo;:
hugo new site documentation   Launch server (with autoreload) :
hugo server   http://localhost:1313
Install a theme :   Install theme :
cd /themes git clone https://github.com/matcornic/hugo-theme-learn.git   Activate new theme in config.toml :
theme = &amp;#34;hugo-theme-learn&amp;#34;   Create first post :   Create chapter (contains post) static-website-generators
cd .. hugo new --kind chapter static-website-generators/_index.md   Create post hugo in chapter static-website-generators :</description>
    </item>
    
    <item>
      <title>Settings</title>
      <link>http://example.org/web/static-site-generators/hugo/settings/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/web/static-site-generators/hugo/settings/</guid>
      <description>Build destination folder Set build destination folder (config.toml) to docs instead of public:
publishDir = &amp;#34;docs&amp;#34; </description>
    </item>
    
    <item>
      <title>Settings</title>
      <link>http://example.org/web/static-site-generators/hugo/themes/learn/settings/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/web/static-site-generators/hugo/themes/learn/settings/</guid>
      <description>Change logo Create file /layouts/partials/logo.html :
&amp;lt;img style=&amp;#34;border-radius: 50%; max-width: 70%;&amp;#34; src=&amp;#34;https://avatars.githubusercontent.com/u/22755712?v=4&amp;#34;&amp;gt; </description>
    </item>
    
    <item>
      <title>Deployment</title>
      <link>http://example.org/web/static-site-generators/hugo/deployment/</link>
      <pubDate>Tue, 18 May 2021 15:59:32 +0200</pubDate>
      
      <guid>http://example.org/web/static-site-generators/hugo/deployment/</guid>
      <description>On gitHub Pages : SOURCE.
  Test git submodules in repository (Hugo theme could be a git submodule).
  Activate relative URL in Hugo settings.
  Activate pages on GitHub repository.
  Set GitHub pages branch to docs.
  Create GitHub Token.
  Add token as secret into repository.
  Activate auto build on push -&amp;gt; see &amp;ldquo;Tools &amp;gt; GitHub &amp;gt; Actions (workflow)&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Troubleshoot</title>
      <link>http://example.org/web/static-site-generators/hugo/troubleshoot/</link>
      <pubDate>Tue, 18 May 2021 15:59:32 +0200</pubDate>
      
      <guid>http://example.org/web/static-site-generators/hugo/troubleshoot/</guid>
      <description>404 on css, js : Activate relative URL instead of absolute (default) :
config.toml :
relativeURLs = true </description>
    </item>
    
    <item>
      <title>Setup</title>
      <link>http://example.org/web/pwa-progressive-web-app/setup/</link>
      <pubDate>Tue, 18 May 2021 15:58:47 +0200</pubDate>
      
      <guid>http://example.org/web/pwa-progressive-web-app/setup/</guid>
      <description>Create basic HTML &amp;amp; CSS for the future WPA : a. index.html
&amp;lt;!doctype html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Hello World&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;css/style.css&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;theme-color&amp;#34; content=&amp;#34;white&amp;#34;/&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body class=&amp;#34;fullscreen&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;h1 class=&amp;#34;title&amp;#34;&amp;gt;Hello World!&amp;lt;/h1&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; b. css/style.css
body { font-family: sans-serif; } /* Make content area fill the entire browser window */ html, .fullscreen { display: flex; height: 100%; margin: 0; padding: 0; width: 100%; } /* Center the content in the browser window */ .</description>
    </item>
    
    <item>
      <title>Notifications</title>
      <link>http://example.org/web/pwa-progressive-web-app/notifications/</link>
      <pubDate>Tue, 18 May 2021 15:58:47 +0200</pubDate>
      
      <guid>http://example.org/web/pwa-progressive-web-app/notifications/</guid>
      <description>https://developer.mozilla.org/fr/docs/Web/Progressive_web_apps/Re-engageable_Notifications_Push
-Notification API (different of push API)
Example of notification (without push) :
window.onload = () =&amp;gt; { &amp;#39;use strict&amp;#39;; if (&amp;#39;serviceWorker&amp;#39; in navigator) { navigator.serviceWorker .register(&amp;#39;./sw.js&amp;#39;); } requestNotifPermission(); } const games = [{ slug: &amp;#39;lost-in-cyberspace&amp;#39;, name: &amp;#39;Lost in Cyberspace&amp;#39;, author: &amp;#39;Zosia and Bartek&amp;#39;, twitter: &amp;#39;bartaz&amp;#39;, website: &amp;#39;&amp;#39;, github: &amp;#39;github.com/bartaz/lost-in-cyberspace&amp;#39; }, { slug: &amp;#39;vernissage&amp;#39;, name: &amp;#39;Vernissage&amp;#39;, author: &amp;#39;Platane&amp;#39;, twitter: &amp;#39;platane_&amp;#39;, website: &amp;#39;github.com/Platane&amp;#39;, github: &amp;#39;github.com/Platane/js13k-2017&amp;#39; }, { slug: &amp;#39;emma-3d&amp;#39;, name: &amp;#39;Emma-3D&amp;#39;, author: &amp;#39;Prateek Roushan&amp;#39;, twitter: &amp;#39;&amp;#39;, website: &amp;#39;&amp;#39;, github: &amp;#39;github.</description>
    </item>
    
    <item>
      <title>Array</title>
      <link>http://example.org/coding/languages/javascript/array/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/coding/languages/javascript/array/</guid>
      <description>Extract part of an array or a string (new array) -&amp;gt; slice() const array = &amp;#39;hello world&amp;#39;; const result = array.slice(0,5); console.log(result); // hello Remove part of an array (replace array) -&amp;gt; splice() const array = [&amp;#39;h&amp;#39;,&amp;#39;e&amp;#39;,&amp;#39;l&amp;#39;,&amp;#39;l&amp;#39;,&amp;#39;o&amp;#39;]; const result = array.splice(0, 3); console.log(result); // hel </description>
    </item>
    
    <item>
      <title>Class</title>
      <link>http://example.org/coding/languages/javascript/class/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/coding/languages/javascript/class/</guid>
      <description>TODO </description>
    </item>
    
    <item>
      <title>Design Patterns</title>
      <link>http://example.org/coding/languages/javascript/design-patterns/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/coding/languages/javascript/design-patterns/</guid>
      <description>Sources :
 JavaScript Design Patterns (BetterProgramming)  List            Module Organize code, encapsulation.     Observer Update an object when an another object changes (see : $emit et $broadcast in JS frameworks).     Prototype “skeleton” of an existing object to create or instantiate new objects.     Singleton Only one instance of a singleton class can exist     Constructor Based on class.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>http://example.org/tools/docker/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/tools/docker/</guid>
      <description>host IP from container
sudo ip addr show docker0 Shell in container
docker exec -it &amp;lt;container name&amp;gt; /bin/bash Extract container id from name :
$(docker ps -qlf &amp;#34;name=stack-dev_cherm&amp;#34;) Copy file in container
Prerequisite : create destination folder in container :
mkdir retourpatrimoine cat /home/arnaudb/Bureau/DATA/PROJETS/BATCH/retourPatrimoine_creerCompteServeurAuth/adherent_lfm_888888_O.csv | docker exec -i $(docker ps -qlf &amp;#34;name=stack-dev_cherm&amp;#34;) /bin/bash -c &amp;#39;cat &amp;gt; /data/retourpatrimoine/adherent_lfm_888888_O.csv&amp;#39; Show full error at service mount :
docker service ps --no-trunc mysql </description>
    </item>
    
    <item>
      <title>GitHub</title>
      <link>http://example.org/tools/github/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/tools/github/</guid>
      <description>Activate pages -Repository -&amp;gt; Settings -&amp;gt; Options -&amp;gt; GitHub Pages
Actions (workflow) Create file : .github/workflows/workflow.yml
Example (auto build hugo static site generator on push) :
name: CI on: push jobs: deploy: runs-on: ubuntu-18.04 steps: - name: Git checkout uses: actions/checkout@v2 - name: Update theme  run: git submodule update --init --recursive - name: Setup hugo uses: peaceiris/actions-hugo@v2 - name: Build run: hugo - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.</description>
    </item>
    
    <item>
      <title>Jest (Unit test)</title>
      <link>http://example.org/coding/tu-unit-test/jest/errors/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/coding/tu-unit-test/jest/errors/</guid>
      <description>Expect to throw error : synchronous :
expect(() =&amp;gt; list.clickButton()).toThrow(&amp;#39;incorrect param &amp;#34;action&amp;#34;&amp;#39;); asynchronous :
expect(list.clickButton()).rejects.toEqual(new Error(&amp;#39;incorrect param &amp;#34;action&amp;#34;&amp;#39;)); </description>
    </item>
    
    <item>
      <title>JSdoc</title>
      <link>http://example.org/coding/languages/javascript/jsdoc/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/coding/languages/javascript/jsdoc/</guid>
      <description>/** * Returns x raised to the n-th power. * * @param {number} x The number to raise. * @param {number} n The power, must be a natural number. * @return {number} x raised to the n-th power. */ </description>
    </item>
    
    <item>
      <title>Kata JS</title>
      <link>http://example.org/learning/js-kata/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/learning/js-kata/</guid>
      <description>Even Or Odd : function even_or_odd(number) { if (number % 2 === 0) return &amp;#39;Even&amp;#39;; return &amp;#39;Odd&amp;#39;; } console.log(even_or_odd(4)) // Even console.log(even_or_odd(5)) // Odd Opposite number : function opposite(number) { return -number } console.log(opposite(5)) // -5 Remove first and last char of string : function removeChar(str){ return str.slice(1,(str.length - 1)) }; console.log(removeChar(&amp;#39;eloquent&amp;#39;)); // loquen; </description>
    </item>
    
    <item>
      <title>Loop</title>
      <link>http://example.org/coding/languages/javascript/loop/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/coding/languages/javascript/loop/</guid>
      <description>for let str = &amp;#39;&amp;#39;; for (let i = 0; i &amp;lt; 9; i++) { str = str + i; } console.log(str); // expected output: &amp;#34;012345678&amp;#34; </description>
    </item>
    
    <item>
      <title>Mock Express Request &amp; Response</title>
      <link>http://example.org/coding/tu-unit-test/jest/mock-express-req-res/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/coding/tu-unit-test/jest/mock-express-req-res/</guid>
      <description>Mock functions helper.js: const mockServerResponse = () =&amp;gt; { const response = {}; response.body = { message: &amp;#39;All good&amp;#39; } response.status = 200; return response; }; const mockExpressRes = () =&amp;gt; { const res = {}; res.send = jest.fn().mockReturnValue(res) res.status = jest.fn().mockReturnValue(res) res.json = jest.fn().mockReturnValue(res) res.sendStatus = jest.fn().mockReturnValue(res) return res }; module.exports = { mockServerResponse, mockExpressRes, }; Use in test : import network from &amp;#39;../../../../src/server/utils/network&amp;#39;; import helper from &amp;#39;../../../Helper/back/helper&amp;#39;; describe(&amp;#39;passePlat&amp;#39;, () =&amp;gt; { test(&amp;#39;passePlat : status 200 + body response&amp;#39;, () =&amp;gt; { const response = helper.</description>
    </item>
    
    <item>
      <title>MongoDB</title>
      <link>http://example.org/coding/mongodb/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/coding/mongodb/</guid>
      <description>Execute script file in mongo shell
mongo localhost:27017/acommeassure aca_parametrage.js Array not empty :
db.getCollection(&#39;acaDocument&#39;).find({ &#39;associations.contrats&#39;: { $exists: true, $not: {$size: 0} } }) Date &amp;gt; :
&#39;historiqueDocument.creation.date&#39;: {&amp;quot;$gte&amp;quot;:new Date(&amp;quot;2020-01-01&amp;quot;)} </description>
    </item>
    
    <item>
      <title>Nock (Mock API calls)</title>
      <link>http://example.org/coding/nock/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/coding/nock/</guid>
      <description>Mock API call :
const nock = require(&amp;#34;nock&amp;#34;); nock(&amp;#34;http://api.service:8080&amp;#34;) .defaultReplyHeaders({ &amp;#39;access-control-allow-origin&amp;#39;: &amp;#39;*&amp;#39;, &amp;#39;access-control-allow-credentials&amp;#39;: &amp;#39;true&amp;#39; }) .get(&amp;#34;/api/contrat/signature/matching&amp;#34;) .reply(200, { license: { key: &amp;#34;mit&amp;#34;, name: &amp;#34;MIT License&amp;#34;, spdx_id: &amp;#34;MIT&amp;#34;, url: &amp;#34;https://api.github.com/licenses/mit&amp;#34;, node_id: &amp;#34;MDc6TGljZW5zZTEz&amp;#34;, }, }); Mock Express middleware (Response) :
const mockResponse = () =&amp;gt; { const res = {}; res.status = jest.fn().mockReturnValue(res); res.json = jest.fn().mockReturnValue(res); res.send = jest.fn().mockReturnValue(res); return res; }; const res = mockResponse(); const test = await creation.sendMailDocuments(sendMailBody, res); // utiliser .</description>
    </item>
    
    <item>
      <title>NodeJs</title>
      <link>http://example.org/coding/nodejs/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/coding/nodejs/</guid>
      <description>Transform callback TO Promise -&amp;gt; util.promisify
const util = require(&amp;#39;util&amp;#39;); ..... const promisified = util.promisify(envoyerMailTemplateDynamique); await promisified(codeMarqueBlanche, extraParams, to, template); </description>
    </item>
    
    <item>
      <title>Object</title>
      <link>http://example.org/coding/languages/javascript/object/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/coding/languages/javascript/object/</guid>
      <description>Object is empty : const a = {}; Object.keys(a).length // 0 (not empty returns 1) </description>
    </item>
    
    <item>
      <title>public API</title>
      <link>http://example.org/web/public-api/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/web/public-api/</guid>
      <description>Public APIs</description>
    </item>
    
    <item>
      <title>String</title>
      <link>http://example.org/coding/languages/javascript/string/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/coding/languages/javascript/string/</guid>
      <description>Extract part of an array or a string (new array) -&amp;gt; slice() const array = &amp;#39;hello world&amp;#39;; const result = array.slice(0,5); console.log(result); // hello Split string by separator -&amp;gt; split() const string = &amp;#39;hello,world&amp;#39;; const result = string.split(&amp;#34;,&amp;#34;); console.log(result); // [&amp;#34;hello&amp;#34;, &amp;#34;world&amp;#34;] </description>
    </item>
    
  </channel>
</rss>
