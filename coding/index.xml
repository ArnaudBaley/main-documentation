<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding on My New Hugo Site</title>
    <link>http://example.org/coding/</link>
    <description>Recent content in Coding on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 May 2021 15:55:39 +0200</lastBuildDate><atom:link href="http://example.org/coding/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jest (Unit test)</title>
      <link>http://example.org/coding/jest/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/coding/jest/</guid>
      <description>Jest - Expect to throw error : synchronous :
expect(() =&amp;gt; list.clickButton()).toThrow(&#39;incorrect param &amp;quot;action&amp;quot;&#39;); asynchronous :
expect(list.clickButton()).rejects.toEqual(new Error(&#39;incorrect param &amp;quot;action&amp;quot;&#39;)); </description>
    </item>
    
    <item>
      <title>Nock (Mock API calls)</title>
      <link>http://example.org/coding/nock/</link>
      <pubDate>Tue, 18 May 2021 15:55:39 +0200</pubDate>
      
      <guid>http://example.org/coding/nock/</guid>
      <description>Mock API call :
const nock = require(&amp;#34;nock&amp;#34;); nock(&amp;#34;http://api.service:8080&amp;#34;) .defaultReplyHeaders({ &amp;#39;access-control-allow-origin&amp;#39;: &amp;#39;*&amp;#39;, &amp;#39;access-control-allow-credentials&amp;#39;: &amp;#39;true&amp;#39; }) .get(&amp;#34;/api/contrat/signature/matching&amp;#34;) .reply(200, { license: { key: &amp;#34;mit&amp;#34;, name: &amp;#34;MIT License&amp;#34;, spdx_id: &amp;#34;MIT&amp;#34;, url: &amp;#34;https://api.github.com/licenses/mit&amp;#34;, node_id: &amp;#34;MDc6TGljZW5zZTEz&amp;#34;, }, }); Mock Express middleware (Response) :
const mockResponse = () =&amp;gt; { const res = {}; res.status = jest.fn().mockReturnValue(res); res.json = jest.fn().mockReturnValue(res); res.send = jest.fn().mockReturnValue(res); return res; }; const res = mockResponse(); const test = await creation.sendMailDocuments(sendMailBody, res); // utiliser .</description>
    </item>
    
  </channel>
</rss>
